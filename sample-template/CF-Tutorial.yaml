AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Environment:
    Type: String
    Default: test
    
Resources:
  # VPC作成
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-VPC"

  # IGW作成
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FirstVPC
      InternetGatewayId: !Ref InternetGateway

  # ルートテーブル作成
  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value:  !Sub "${Environment}-Tutorial-RT"

  # ルートテーブルへIGWの関連付け
  FrontendRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # サブネット作成
  FrontendSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-pub-a"

  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-pub-c"

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: "10.0.10.0/24"
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-pri-a"

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: "10.0.11.0/24"
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-pri-c"

  # サブネットをルーティングテーブルと紐付け
  FrontendSubnetRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet
      RouteTableId: !Ref FrontendRouteTable

  FrontendSubnetRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet2
      RouteTableId: !Ref FrontendRouteTable

  # セキュリティグループ作成
  Ec2SecurityGroupApp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow http and ssh
      VpcId: !Ref FirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "126.13.205.24/32"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-ec2-SG"

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref FirstVPC
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: "10.0.0.100/32"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Tutorial-rds-SG"

  # S3アクセス用ロールの作成
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      RoleName: S3Access
      Tags:
        - Key: Name
          Value: CF-Tutorial-s3access-role

  S3AccessInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: S3AccessRole

  # EC2インスタンス作成
  Ec2InstanceServer:
    Type: "AWS::EC2::Instance"
    Properties:
      IamInstanceProfile:
        !Ref S3AccessInstanceProfile
      # AmazonLinuxを指定しています
      ImageId: ami-0d3bbfd074edd7acb
      InstanceType: "t2.micro"
      KeyName: "training-dev-keypair"
      SecurityGroupIds:
        - !Ref Ec2SecurityGroupApp
      SubnetId:
         !Ref FrontendSubnet
      PrivateIpAddress: 10.0.0.100
      #KeyName: Raise-Tech_kimu
      Tags:
        - Key: Name
          Value: "python-app"
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          yum install -y pip
          pip3 install streamlit
          pip3 install yfinance
          yum install -y ruby
          yum install -y aws-cli
          yum install -y git
          cd /home/ec2-user
          git clone https://github.com/kimu05/my-app.git
          wget https://aws-codedeploy-ap-northeast-1.s3.ap-northeast-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          echo "[Unit]" > /etc/systemd/system/my-app.service
          echo "Description=Run app" >> /etc/systemd/system/my-app.service
          echo "After=network.target" >> /etc/systemd/system/my-app.service
          echo "[Service]" >> /etc/systemd/system/my-app.service
          echo "WorkingDirectory=/home/ec2-user/my-app" >> /etc/systemd/system/my-app.service
          echo "ExecStart=/home/ec2-user/my-app/run.sh" >> /etc/systemd/system/my-app.service
          echo "Restart=always" >> /etc/systemd/system/my-app.service
          echo "User=ec2-user" >> /etc/systemd/system/my-app.service
          echo "[Install]" >> /etc/systemd/system/my-app.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/my-app.service


#  # S3バケット作成
#  myS3:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: "cf-s3-2023-714"
#      AccessControl: PublicReadWrite
#      PublicAccessBlockConfiguration: 
#        BlockPublicAcls: false
#        BlockPublicPolicy: false
#        IgnorePublicAcls: false
#        RestrictPublicBuckets: false
#      OwnershipControls:
#        Rules:
#          - ObjectOwnership: ObjectWriter
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: AES256
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial

  # RDS作成
#  MyDB:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBInstanceIdentifier: MyDB
#      VPCSecurityGroups:
#        - Ref: DBEC2SecurityGroup
#      AllocatedStorage: '5'
#      DBInstanceClass: db.t2.micro
#      Engine: MySQL
#      AllocatedStorage: 20
#      StorageType: gp2
#      MasterUsername: admin
#      MasterUserPassword: test12345
#      DBSubnetGroupName: !Ref DBSubnetGroup
#      EnableIAMDatabaseAuthentication: true
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial
#
#  DBSubnetGroup:
#    Type: "AWS::RDS::DBSubnetGroup"
#    Properties:
#      DBSubnetGroupDescription: DB subnet group
#      SubnetIds:
#          - Ref: PrivateSubnet
#          - Ref: PrivateSubnet2
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial
